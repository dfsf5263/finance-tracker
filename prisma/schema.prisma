generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid()) @db.Uuid
  clerkUserId           String                 @unique @map("clerk_user_id")
  email                 String                 @unique
  firstName             String?                @map("first_name")
  lastName              String?                @map("last_name")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  households            UserHousehold[]
  invitationsSent       HouseholdInvitation[]  @relation("InviterUser")
  invitationsReceived   HouseholdInvitation[]  @relation("InvitedUser")

  @@map("user")
}

enum HouseholdRole {
  OWNER
  MEMBER
  VIEWER

  @@map("household_role")
}

model UserHousehold {
  userId        String         @map("user_id") @db.Uuid
  householdId   String         @map("household_id") @db.Uuid
  role          HouseholdRole  @default(MEMBER)
  joinedAt      DateTime       @default(now()) @map("joined_at")
  invitedBy     String?        @map("invited_by") @db.Uuid
  weeklySummary Boolean        @default(true) @map("weekly_summary")
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  household     Household      @relation(fields: [householdId], references: [id], onDelete: Cascade)

  @@id([userId, householdId])
  @@map("user_household")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED

  @@map("invitation_status")
}

model HouseholdInvitation {
  id           String           @id @default(uuid()) @db.Uuid
  householdId  String           @map("household_id") @db.Uuid
  inviterUserId String          @map("inviter_user_id") @db.Uuid
  inviteeEmail String           @map("invitee_email")
  inviteeUserId String?         @map("invitee_user_id") @db.Uuid
  role         HouseholdRole    @default(MEMBER)
  status       InvitationStatus @default(PENDING)
  token        String           @unique @default(uuid())
  expiresAt    DateTime         @map("expires_at")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  household    Household        @relation(fields: [householdId], references: [id], onDelete: Cascade)
  inviter      User             @relation("InviterUser", fields: [inviterUserId], references: [id])
  invitee      User?            @relation("InvitedUser", fields: [inviteeUserId], references: [id])

  @@index([inviteeEmail])
  @@index([token])
  @@map("household_invitation")
}

model Household {
  id           String                    @id @default(uuid()) @db.Uuid
  name         String
  annualBudget Decimal?                  @map("annual_budget") @db.Decimal(12, 2)
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @updatedAt @map("updated_at")
  accounts     HouseholdAccount[]
  users        HouseholdUser[]
  categories   HouseholdCategory[]
  types        HouseholdType[]
  transactions Transaction[]
  members      UserHousehold[]
  invitations  HouseholdInvitation[]

  @@map("household")
}

model HouseholdAccount {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  householdId  String        @map("household_id") @db.Uuid
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  household    Household     @relation(fields: [householdId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([name, householdId])
  @@map("household_account")
}

model HouseholdUser {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  householdId  String        @map("household_id") @db.Uuid
  annualBudget Decimal?      @map("annual_budget") @db.Decimal(12, 2)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  household    Household     @relation(fields: [householdId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([name, householdId])
  @@map("household_user")
}

model HouseholdCategory {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  householdId  String        @map("household_id") @db.Uuid
  annualBudget Decimal?      @map("annual_budget") @db.Decimal(12, 2)
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  household    Household     @relation(fields: [householdId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([name, householdId])
  @@map("household_category")
}

model HouseholdType {
  id           String        @id @default(uuid()) @db.Uuid
  name         String
  householdId  String        @map("household_id") @db.Uuid
  isOutflow    Boolean       @default(true) @map("is_outflow")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  household    Household     @relation(fields: [householdId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@unique([name, householdId])
  @@map("household_type")
}

model Transaction {
  id              String            @id @default(uuid()) @db.Uuid
  householdId     String            @map("household_id") @db.Uuid
  accountId       String            @map("account_id") @db.Uuid
  userId          String?           @map("user_id") @db.Uuid
  transactionDate DateTime          @map("transaction_date") @db.Date
  postDate        DateTime          @map("post_date") @db.Date
  description     String
  categoryId      String            @map("category_id") @db.Uuid
  typeId          String            @map("type_id") @db.Uuid
  amount          Decimal           @db.Decimal(10, 2)
  memo            String?
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  household       Household         @relation(fields: [householdId], references: [id], onDelete: Cascade)
  account         HouseholdAccount  @relation(fields: [accountId], references: [id])
  category        HouseholdCategory @relation(fields: [categoryId], references: [id])
  type            HouseholdType     @relation(fields: [typeId], references: [id])
  user            HouseholdUser?    @relation(fields: [userId], references: [id])

  @@unique([householdId, transactionDate, description, amount])
  @@index([householdId])
  @@map("transaction")
}